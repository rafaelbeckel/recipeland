#!/bin/bash

b=$(tput bold) #bold text
n=$(tput sgr0) #normal text

echo ""

show_help() {
    echo "      ${b}Recipe from Recipeland - Version 0.1 ${n}"
    echo ""
    echo "      This script installs and runs Recipeland,"
    echo "      a tasty Web API for managing delicious recipes!"
    echo ""
    echo ""
    echo "      ${b}USAGE: ./recipe [command] ${n}"
    echo ""
    echo ""
    echo "      ${b}Commands:"
    echo ""
    echo "        ${b} help ${n} ( help | -h | --help | '' )"
    echo "         Shows this message."
    echo ""
    echo "        ${b} prepare ${n} ( prepare | config | setup )"
    echo "         Generates .env file and"
    echo "         configure server's domain name."
    echo ""
    echo "        ${b} cook ${n} ( cook | run | start )"
    echo "         Run all docker containers in daemon mode"
    echo "         and installs all necessary packages using composer."
    echo "         API will be ready to be consumed in the configured domain name."
    echo "         If there's no .env file present, we will automatically create one."
    echo ""
    echo "        ${b} boil ${n} ( boil | verbose | -v | --verbose | debug )"
    echo "         Same as cook, but in verbose mode"
    echo ""
    echo "        ${b} taste ${n} ( taste | test )"
    echo "         Run all unit tests."
    echo "         It needs a running container to work."
    echo ""
    echo "        ${b} finish ${n} ( finish | stop | quit | exit )"
    echo "         Stop all docker containers"
    echo ""
    exit 0
}

is_installed() {
    which $1
    if [ $? -eq 0 ]
    then
        $1 --version | grep -i "$1 version"
        if [ $? -eq 0 ]
        then
            true
        else
            false
        fi
    else
        false
    fi
}

check_dependencies() {
    echo "Checking for Docker and Docker-Compose..."
    
    echo ""
    if ! is_installed "docker"
    then
        echo "You need ${b}Docker${n} to use this script."
        echo "Visit ${b}https://docs.docker.com/install${n} for specific instructions."
    fi
    
    echo ""
    if ! is_installed "docker-compose"
    then
        echo "You need ${b}Docker-Compose${n} to use this script."
        echo "Visit ${b}https://docs.docker.com/compose/install${n} for specific instructions."
        exit 1
    fi

    echo ""
}

read_var() {
    VAR=$(grep $1 $2 | xargs)
    IFS="=" read -ra VAR <<< "$VAR"
    echo ${VAR[1]}
}

prepare() {
    if [ ! -f ".env.example" ]
    then
        echo "Mandatory .env.example file not found!"
        exit 1
    fi

    if [ ! -f ".env" ]
    then
        echo "Generating .env file..."
        cp .env.example .env
        echo ".env file was generated!"
        echo "These are the default values:"
        echo "${b}"
        cat .env
        echo "${n}"
        echo ""
        read -p "Will you accept all the defaults? ${b} (y/N) ${n}" -n 1 -r
        echo ""
        if [[ ! $REPLY =~ ^[Yy]$ ]]
        then
            echo "Please edit ${b}.env${n} file and start this script again."
            echo "Bye, and happy editing!"
            echo ""
            exit 0
        else
            echo "You accepted the default values."
            echo "Let's continue our work..."
            echo ""
        fi
    else
        echo ".env file is present!"
    fi

    echo "Configuring web server's domain name..."
    DOMAIN=$(read_var DOMAIN .env)
    sed -i "s/server_name.*/server_name ${DOMAIN} nginx;/" ./docker/nginx/default.conf
    sed -i "s/return 301.*/return 301 https:\/\/${DOMAIN}\$request_uri;/" ./docker/nginx/default.conf

    echo "Domain name set to ${b}$DOMAIN${n} in you server config file"

    echo ""
    echo "All set! We are ready to cook!"
    echo ""
}

cook() {
    if [ ! -f ".env" ]
    then
        prepare
    fi

    check_dependencies

    if [[ $(docker inspect -f '{{.State.Running}}' recipeland_php) == "true" ]]
    then
        echo "${b}Containers are already running!${n}"
        echo "You can stop them with ${b}'$ ./recipe finish'${n}."

    else

        DOMAIN=$(read_var DOMAIN .env)
        echo "The API will start listening at ${b}https://$DOMAIN${n}"

        if [ "$1" == "verbose" ]
        then
            echo "Press ${b}Ctrl+C${n} to exit."
            docker-compose up
            finish
        else
            docker-compose up -d
            echo ""
            echo "All containers started!"
            echo ""
            echo "Run ${b}'$ ./recipe finish'${n} to stop the containers."
            echo "Run ${b}'$ ./recipe taste'${n} to run all unit tests and api test."
            echo "Run ${b}'$ ./recipe boil'${n} to debug the containers if anything goes wrong."
            echo ""
            echo "Visit ${b}https://$DOMAIN/recipes${n} to see our generated masterpieces!"
            echo ""
            echo "We use a self-signed SSL certificate, and it won't be accepted on most clients."
            echo "You need to tell your browser or API client to accept it. Look at README for instructions."
            echo ""
            echo "If you get a 504 Error from nginx, just reload the page a few times until the service starts."
            echo "Migrations can take a while. PHP-FPM won't start listening until they are all finished." 
            echo "You can make startup faster by reducing the number of generated recipes in .env file."
        fi

    fi

    echo ""
}

boil() {
    cook "verbose"
}

taste() {
    echo "Let's test our application. Is the container running?"
    check_dependencies
    if [ $(docker inspect -f '{{.State.Running}}' recipeland_php) == "true" ]
    then
        echo "Running PHPUnit..."
        docker exec -it recipeland_php ./vendor/bin/phpunit
    else
        echo "Container is not running! Start the application with ${b}'$ ./recipe cook'${n} first."
    fi
    echo ""
}

finish() {
    check_dependencies
    docker-compose down
    echo ""
    echo "${b}You finished cooking!${n}"
    echo ""
}

case $1 in
    "help" | "-h" | "--help")
        show_help 
        ;;
    "prepare" | "config" | "setup")
        prepare 
        ;;
    "cook" | "run" | "start")
        cook 
        ;;
    "boil" | "verbose" | "-v" | "--verbose" | "debug")
        boil 
        ;;
    "taste" | "test")
        taste 
        ;;
    "finish" | "stop" | "quit" | "exit")
        finish 
        ;;
    *)
        show_help 
        ;;
esac